[
  {
    "model": "challenges.language",
    "pk": "Python",
    "fields": {
      "default_code": "def main():\n    # Let's go champ\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  },
  {
    "model": "challenges.language",
    "pk": "Go",
    "fields": {
      "default_code": "package main\nimport \"fmt\"\n\nfunc main() {\n\t\n}"}
  },
  {
    "model": "challenges.language",
    "pk": "Rust",
    "fields": {
      "default_code": "use std::io;\n\nfn main() {\n\t\n}"
    }
  },
  {
    "model": "challenges.language",
    "pk": "C++",
    "fields": {
      "default_code": "#include <iostream>\n\nuse std::cin;\nuse std::cout;\n\nint main() {\n\t\n\treturn 0;\n}"
    }
  },
  {
    "model": "challenges.language",
    "pk": "Kotlin",
    "fields": {
      "default_code": "import java.util.*\n\nfun main(args: Array<String>) {\n\t\n}"
    }
  },
  {
    "model": "challenges.maincategory",
    "pk": "Algorithms",
    "fields": {}
  },

  {
    "model": "challenges.maincategory",
    "pk": "Data Structures",
    "fields": {}
  },

  {
    "model": "challenges.maincategory",
    "pk": "Python Language",
    "fields": {}
  },

  {
    "model": "challenges.subcategory",
    "pk": "Introduction",
    "fields": {
      "meta_category": "Python Language"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Collections",
    "fields": {
      "meta_category": "Python Language"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Closures and Decorators",
    "fields": {
      "meta_category": "Python Language"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Itertools",
    "fields": {
      "meta_category": "Python Language"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Array",
    "fields": {
      "meta_category": "Data Structures"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Linked List",
    "fields": {
      "meta_category": "Data Structures"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Trees",
    "fields": {
      "meta_category": "Data Structures"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Disjoint Set",
    "fields": {
      "meta_category": "Data Structures"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Recursion",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Sorting",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Greedy",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Strings",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Graphs",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Dynamic Programming",
    "fields": {
      "meta_category": "Algorithms"
    }
  },

  {
    "model": "challenges.subcategory",
    "pk": "Miscellaneous",
    "fields": {
      "meta_category": "Algorithms"
    }
  },
  {
    "model": "challenges.challengedescription",
    "pk": 1,
    "fields": {
      "content": "Write a program that prints `Hello World` to the console!",
      "input_format": "",
      "output_format": "The string \"Hello World\" on a single line.",
      "constraints": "",
      "sample_input": "",
      "sample_output": "",
      "explanation": ""
    }
  },
  {
    "model": "challenges.challenge",
    "pk": 1,
    "fields": {
      "name": "Say Hello World!",
      "description": 1,
      "difficulty": 0,
      "score": 10,
      "test_file_name": "hello_tests",
      "test_case_count": 1,
      "category": "Miscellaneous",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
  },
  {
    "model": "challenges.challengedescription",
    "pk": 2,
    "fields": {
      "content": "While studying for her university, FMI, Rositsa came up with the idea of a basic number.{{NPL}} {{NPL}}A basic number was the following: a positive number, which when represented in base **b** would have every prefix with **k** count digits(from 1 to the count of digits in the number to the given base) converted to base **b** be divisible by **k**. {{NPL}}{{NPL}}Example:{{NPL}}Using base 2{{NPL}}1 is a basic number since its prefix of length 1 (prefix=1) is divisible by 1{{NPL}}2 is a basic number. 2 in base 2 is 10, its prefix of length 1 is 1, which is divisible by 1 and its prefix of length 2 is 10, which is divisible by 2.{{NPL}}3, on the other hand, is not a basic number. Converted to base 2, 3 is equal to 11. Its prefix of length 1(prefix=1) is divisible by 1, but its prefix of length 2(prefix=11) is not divisible by 2.{{NPL}}{{NPL}}Rositsa wants you to find the count of basic numbers represented in the given base **b**, which are exactly **d** digits long (when converted to the base).",
      "input_format": "First line of the input denotes the number of test cases.{{NPL}}For each test case there is a single line containing two integers, the base **b** and digits **d**, separated by a single space.",
      "output_format": "A number on a single line",
      "constraints": "1<=Test case count<=100{{NPL}}2<=Base<=4{{NPL}}1<=Digits<=10^7",
      "sample_input": "{{NPL}}1{{NPL}}3 2",
      "sample_output": "1",
      "explanation": "There are exactly 6 numbers that have 2 digits converted to base 3 and they are [3, 4, 5, 6, 7, 8](in base 3 [10, 11, 12, 20, 21, 22]) {{NPL}}Only numbers 4(11), 6(20) and 8(22) are basic numbers. 4 is a basic number, because his prefix of length 1(prefix=1, converted to base 3=1) is divisible by 1 and its prefix of length 2(prefix=11, converted to base3=4) is divisible by 2."
    }
  },
  {
    "model": "challenges.challenge",
    "pk": 2,
    "fields": {
      "name": "Basic Numbers",
      "description": 2,
      "difficulty": 4.5,
      "score": 40,
      "test_file_name": "basic_numbers_tests",
      "test_case_count": 8,
      "category": "Dynamic Programming",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
  },

    {
    "model": "challenges.challengedescription",
    "pk": 3,
    "fields": {
      "content": "Given an a list of **N** numbers, find their sum",
      "input_format": "One line, containing the numbers, separated by a comma and whitespace",
      "output_format": "A number on a single line, the sum of the numbers",
      "constraints": "1<=Number<=100000{{NPL}}1<=N<=1000",
      "sample_input": "1, 2, 3",
      "sample_output": "6",
      "explanation": "1 + 2 + 3 = 6"
    }
  },

  {
    "model": "challenges.challenge",
    "pk": 3,
    "fields": {
      "name": "Array Sum",
      "description": 3,
      "difficulty": 1,
      "score": 10,
      "test_file_name": "array_sum_tests",
      "test_case_count": 7,
      "category": "Miscellaneous",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
  },

  {
    "model": "challenges.challengedescription",
    "pk": 4,
    "fields": {
      "content": "Given a sequence of numbers, find the smallest and biggest number in said sequence.",
      "input_format": "One line, containing the numbers, separated by a comma and whitespace",
      "output_format": "The smallest and biggest number printed on a single line, separated by a comma",
      "constraints": "1<=Number<=100000{{NPL}}1<=N<=1000",
      "sample_input": "10, 12, -1",
      "sample_output": "-1, 12",
      "explanation": ""
    }
  },

  {
    "model": "challenges.challenge",
    "pk": 4,
    "fields": {
      "name": "Array Amplitude",
      "description": 4,
      "difficulty": 1,
      "score": 10,
      "test_file_name": "array_amplitude_tests",
      "test_case_count": 10,
      "category": "Miscellaneous",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
  },

  {
    "model": "challenges.challengedescription",
    "pk": 5,
    "fields": {
      "content": "Mark and Emily are the only people that managed to survive the apocalypse that 2048 brought with it. Unfortunately for them, the apocalypse split the Earth into islands separated by lava. {{NPL}}Given the Earth's map in a Cartesian coordinate system and the coordinates of each island, your job is to say whether Mark and Emily will ever be able to meet through land.",
      "input_format": "On the first input line you will be given the number of islands **N** and the number of queries **M** as 2 space-separated integers.{{NPL}}On the next **N** lines you will be given the coordinates of each log in the format \" **Ax** **Ay** **Bx** **By** \".{{NPL}}On the next **M** lines you will be given queries in the format \"A B\" where A and B correspond to the island Mark and Emily are on respectively, in the order they were given in the input (starting from 1).",
      "output_format": "For each query print \"**YES**\" if the their islands are connected. Otherwise, print \"**NO**\".",
      "constraints": "2<=N<=1000{{NPL}}1<=M<=10000{{NPL}}All island coordinates will be valid integer numbers in the range [-100..100].",
      "sample_input": "4 3{{NPL}}-35 60 -20 15{{NPL}}-50 20 -30 -20{{NPL}}-10 30 60 10{{NPL}}-40 -10 50 -30{{NPL}}2 4{{NPL}}4 3{{NPL}}4 1",
      "sample_output": "YES{{NPL}}YES{{NPL}}NO",
      "explanation": "Islands 1->2->4 are connected and Island 3 is not connected to anything."
    }
  },


  {
    "model": "challenges.challenge",
    "pk": 5,
    "fields": {
      "name": "Lava World",
      "description": 5,
      "difficulty": 3.5,
      "score": 30,
      "test_file_name": "lava_world_tests",
      "test_case_count": 6,
      "category": "Graphs",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
  },

  {
    "model": "challenges.challengedescription",
    "pk": 6,
    "fields": {
      "content": "Solomon is out on an adventure in a labyrinth. The purpose of a labyrinth is to find the way out, but Solomon is rather strange and enjoys his time in the labyrinth. Only being able to move left, right, up and down, he wants you to find the longest path in the labyrinth for him, so that he can walk the maximum distance before exiting. {{NPL}}The labyrinth will be represented by non-distinct integers in a matrix. A valid path through the labyrinth is defined as a path where the number Solomon steps on is increased by 1 exactly.{{NPL}}Example: 1->2->3 is a valid path, but 1->3->4 is not.",
      "input_format": "On the first input line you will be given the number of rows **N** and the number of columns **M** as 2 space-separated integers.{{NPL}}On the next **N** lines you will be given all the numbers on that row, separated by a single space.",
      "output_format": "On the first line, print the number of steps that Solomon will walk on the longest path.{{NPL}}On the second line, print the numbers that Solomon has stepped on his path in consecutive order.{{NPL}}Prioritize going in the following directions all the time: LEFT, RIGHT, DOWN, UP.",
      "constraints": "2<=N<=1000{{NPL}}1<=M<=1000",
      "sample_input": "3 4{{NPL}}1 2 3 14{{NPL}}2 1 2 3{{NPL}}3 4 5 4",
      "sample_output": "5{{NPL}}1->2->3->4->5",
      "explanation": "There are two identical best paths.{{NPL}}The first one start at 0,0, goes all the way down and right until it reaches 5.{{NPL}}The second one starts at 1,2, goes all the way right, down once and left to reach the 5."
    }
  },

   {
    "model": "challenges.challenge",
    "pk": 6,
    "fields": {
      "name": "Labyrinth Adventure",
      "description": 6,
      "difficulty": 4.5,
      "score": 40,
      "test_file_name": "labyrinth_adventure_tests",
      "test_case_count": 9,
      "category": "Dynamic Programming",
      "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
    }
    },

    {
      "model": "challenges.challengedescription",
      "pk": 7,
      "fields": {
        "content": "Joe has decided it is time to mow his **N**x**M** lawn, although before he starts off, he wants to know how much time it will take him.{{NPL}}He knows how much seconds each square meter will take him, but is not good enough to calculate the overall time.{{NPL}}Joe will also ask you for **T** various land areas to find one that will take exactly as much time as he wants to spend today.{{NPL}}For each single land area, Joe will give you (**i**, **j**) the top-left and (**k**, **l**) bottom-right point coordinates and will expect you to tell him the amount of seconds it will take him to mow that lawn area.",
        "input_format": "On the first line, you will receive **N** and **M** indicating the lawn's height and width, respectively{{NPL}}On the second line, you will receive **T**, the count of land areas Joe will ask for{{NPL}}For **N** more lines, you will receive **M** space separated integers, denoting the seconds required to mow the square meter at that line.{{NPL}}For **T** more lines, you will receive **i**, **j**, **k**, and **ll**, denoting the top-left and bottom-right points of the area Joe is asking for.",
        "output_format": "For each **T** area, output a single integer denoting the sum of the seconds in all cells that fall withing the given area.",
        "constraints": "1 <= **N** <= 2500{{NPL}}1 <= **M** <= 2500{{NPL}}5 <= **T** <= 25000",
        "sample_input": "4 4{{NPL}}2{{NPL}}3 0 1 4{{NPL}}5 6 3 2{{NPL}}1 2 0 1{{NPL}}4 1 0 1{{NPL}}2 2 3 3{{NPL}}0 0 1 2",
        "sample_output": "4{{NPL}}18"
      }
    },

    {
      "model": "challenges.challenge",
      "pk": 7,
      "fields": {
        "name": "Lawnmower",
        "description": 7,
        "difficulty": 4.5,
        "score": 35,
        "test_file_name": "lawnmower_tests",
        "test_case_count": 9,
        "category": "Dynamic Programming",
        "supported_languages": ["Python", "Rust", "C++", "Go", "Kotlin"]
      }
    }
]
